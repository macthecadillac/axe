*axe*

A configurable plugin to execute external commands in the built-in terminal based on
file type.

--------------------------------------------------------------------------------
1. Commands

*Axe*           - `Axe {cmd}` where `cmd` is the sub-command you defined
                (see |g:axe#cmds| below). This will execute the
                command you configured.
*AxeList*       - List all the defined sub-commands available for the current
                file type
*AxeProcs*      - List all background processes launched through |Axe|
                (those that run not in the terminal but in the background)
*AxeStop*       - Terminate process with the provided process number.
                `Axe {#}` where `#` is the process number listed by
                |AxeListProcs|.


--------------------------------------------------------------------------------
2. Configurations

Configurations could be global or local. Global configurations reside in your
`init.vim` whereas local configurations are located in `.axe.vim` in
your local directory, either in the same folder as the file to be edited or in
the root of the `git` repository. Local configurations, if found, always have
precedence over global configurations. The configuration options that are
covered in the following are applicable to both global and local
configurations.


g:axe#cmds                                    *g:axe#cmds*

This is a |dictionary| that maps |Axe| sub-commands to shell commands. The
dictionary must contain keys (as |string|'s) that are vim |filetype|'s. The value
of the each entry is another |dictionary| that contains the following three
entries:

  `cmd`              |string| The command to be invoked
  `with_filename`    |boolean| Supply the command with the file name (append to
                   the command) if set to 1, run the command without the file
                   name if set to 0.
  `in_term`          |boolean| Run the command in the terminal if set to 1, run
                   in the background if set to 0.

Instead of being specific file types, the first level keys could optionally be
a wildcard, in this case `'*'` that serves as a catch-all and the command will
henceforth be defined for all file types. Notice that file type specific
commands will override catch-all commands if conflicts arise.

Example: >

  let g:axe#cmds = {
        \ '*': {
        \     'update-ctags': {
        \       'cmd': 'ctags -R -h --exclude={.git,__pycache,__init__.py}',
        \       'with_filename': 0,
        \       'in_term': 0
        \     },
        \   },
        \ 'python': {
        \     'run': {
        \       'cmd': '$HOME/anaconda3/bin/python',
        \       'with_filename': 1,
        \       'in_term': 1
        \     },
        \     'background-run': {
        \       'cmd': '$HOME/anaconda3/bin/python',
        \       'with_filename': 1,
        \       'in_term': 0
        \     },
        \   },
        \ 'tex': {
        \     'build': {
        \       'cmd': 'latexmk -silent',
        \       'with_filename': 1,
        \       'in_term': 1
        \     },
        \     'continuous-build': {
        \       'cmd': 'latexmk -pvc -interaction=nonstopmode',
        \       'with_filename': 1,
        \       'in_term': 0
        \     },
        \   },
        \ 'rust': {
        \     'run': {'cmd': 'cargo run', 'with_filename': 0, 'in_term': 1},
        \     'quick-build': {
        \       'cmd': 'cargo build',
        \       'with_filename': 0,
        \       'in_term': 1
        \     },
        \     'release-build': {
        \       'cmd': 'cargo build --release',
        \       'with_filename': 0,
        \       'in_term': 1
        \     },
        \   },
        \ }
<

g:axe#split_direction              *g:axe#split_direction*

  Type: |string|
  Default: `'down'`
  
  For terminal commands, this option determines the direction in which the
  terminal split should be opened. Available options are `'up'`, `'down'`,
  `'left'`, `'right'`.


g:axe#exit_message                    *g:axe#exit_message*

  Type: |string|
  Default: `'\n-------------------------\nPress ENTER to exit'`

  This option sets the text to be printed to the terminal at the termination of
  a terminal command.


g:axe#term_height                      *g:axe#term_height*

  Type: |integer|
  Default: `15`

  For terminal commands, this option sets the height of the terminal split (if
  |g:axe#split_direction| is set to `'up'` or `'down'`).


g:axe#term_width                        *g:axe#term_width*

  Type: |integer|
  Default: `79`

  For terminal commands, this option sets the width of the terminal split (if
  |g:axe#split_direction| is set to `'left'` or `'right'`).


                                 *g:axe#remove_term_buffer_when_done*
g:axe#remove_term_buffer_when_done

  Type: |boolean|
  Default: `1`

  For terminal commands, this option determines whether the buffer in which the
  terminal was run should be discarded when the command exits.

  vim:tw=78:ts=4:ft=help:norl:
