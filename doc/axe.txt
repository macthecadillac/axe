*axe*

A configurable plugin to execute external commands in the built-in terminal
based on file type.

------------------------------------------------------------------------------
1. Commands

*Axe*           - `Axe {cmd}` where `cmd` is the sub-command you defined
                (see |g:axe#cmds| below). This will execute the
                command you configured.
*AxeList*       - List all the defined sub-commands available for the current
                file type
*AxeProcs*      - List all background processes launched through |Axe|
                (those that run not in the terminal but in the background)
*AxeStop*       - Terminate process with the provided process number.
                `AxeStop {#}` where `#` is the process number listed by
                |AxeListProcs|.

*AxeFloats*     - List all the float terminals opened by |Axe|.

*AxeCloseFloat* - Close the floating window with the provided window ID.
                `AxeCloseFloat {#}` where `#` is the window ID listed by
                |AxeFloats|.


------------------------------------------------------------------------------
2. Configurations

Configurations could be global or local. Global configurations reside in your
`init.vim` whereas local configurations are located in `.axe.vim` in
your local directory, either in the same folder as the file to be edited or in
the root of the `git` repository. Local configurations, if found, always have
precedence over global configurations. The configuration options that are
covered in the following are applicable to both global and local
configurations.


g:axe#cmds                                                        *g:axe#cmds*

  All hooks reside in `g:axe#cmds`. It is a dictionary that maps `Axe`
  sub-commands to shell commands. The dictionary must contain keys (as
  `string`'s) that are vim `filetype`'s. The value of the each entry is
  another dictionary that must contain this entry:

    `cmd`              |string| The command to be invoked
  
  Aside from `cmd`, you can include any valid configuration keys (without the
  `'axe#'` prefix) in the dictionary and these will have precedence over the
  global/file type configurations.

  Instead of being specific file types, the first level keys could optionally
  be a wildcard, in this case `'*'` that serves as a catch-all and the command
  will henceforth be defined for all file types. Notice that file type
  specific commands will override catch-all commands if conflicts arise.
  
  Example: >
  
    let g:axe#cmds = {
          \ '*': {
          \     'update-ctags': {
          \       'cmd': 'ctags -R -h --exclude={.git}',
          \       'with_filename': 0,
          \     },
          \   },
          \ 'python': {
          \     'run': {
          \       'cmd': '$HOME/anaconda3/bin/python',
          \       'in_term': 1
          \     },
          \     'background-run': {'cmd': '$HOME/anaconda3/bin/python'},
          \   },
          \ 'tex': {
          \     'build': {
          \       'cmd': 'latexmk -silent',
          \       'in_term': 1
          \     },
          \     'continuous-build': {'cmd': 'latexmk -pvc -interaction=nonstopmode'},
          \   },
          \ 'rust': {
          \     'run': {'cmd': 'cargo run', 'with_filename': 0, 'in_term': 1},
          \     'quick-build': {
          \       'cmd': 'cargo build',
          \       'with_filename': 0,
          \       'in_term': 1
          \     },
          \     'release-build': {
          \       'cmd': 'cargo build --release',
          \       'in_term': 1
          \     },
          \   },
          \ }
  <

g:axe#filetype_defaults                              *g:axe#filetype_defaults*

  Type: |dictionary|
  Default: `{}`

  This option sets the behavior of the executor on a per filetype basis. The
  dictionary could contain any of the configuration entries (without the
  `'axe#'` prefix).

  Example: >
  
      let g:axe#filetype_defaults = {
        \ 'rust': {'with_filename': 0},
        \ }
  <


g:axe#with_filename                                      *g:axe#with_filename*
  
  Type: |boolean|
  Default: `1`

  Whether the name of the file currently in buffer should be appended to the
  command being run.


g:axe#in_term                                                  *g:axe#in_term*

  Type: |boolean|
  Default: `0`

  Whether to run commands in the neovim terminal.


g:axe#exe_in_proj_root                                *g:axe#exe_in_proj_root*

  Type: |boolean|
  Default: `0`

  Whether to run commands in project root directories (if the .git directory
  could be found).


g:axe#split_direction                                  *g:axe#split_direction*

  Type: |string|
  Default: `'down'`
  
  For terminal commands, this option determines the direction in which the
  terminal split should be opened. Available options are `'up'`, `'down'`,
  `'left'`, `'right'`.


g:axe#exit_message                                        *g:axe#exit_message*

  Type: |string|
  Default: `'\n-------------------------\nPress ENTER to exit'`

  This option sets the text to be printed to the terminal at the termination
  of a terminal command.


g:axe#term_height                                          *g:axe#term_height*

  Type: |integer|
  Default: `15`

  For terminal commands, this option sets the height of the terminal split (if
  |g:axe#split_direction| is set to `'up'` or `'down'`).


g:axe#term_width                                            *g:axe#term_width*

  Type: |integer|
  Default: `79`

  For terminal commands, this option sets the width of the terminal split (if
  |g:axe#split_direction| is set to `'left'` or `'right'`).


                                          *g:axe#remove_term_buffer_when_done*
g:axe#remove_term_buffer_when_done

  Type: |boolean|
  Default: `1`

  For terminal commands, this option determines whether the buffer in which
  the terminal was run should be discarded when the command exits.

g:axe#show_stderr_on_error                        *g:axe#show_stderr_on_error*

  Type: |boolean|
  Default: `1`

  For background commands, this option determines whether to show stderr when
  the command exited with an error.

g:axe#show_stdout_in_split                        *g:axe#show_stdout_in_split*

  Type: |boolean|
  Default: `0`

  Whether to pipe the output from stdout to a split.

g:axe#show_stdout_in_float                        *g:axe#show_stdout_in_float*

  Type: |boolean|
  Default: `0`

  Whether to show the output of stdout in a floating window.

g:axe#show_stdout_in_cmdline                    *g:axe#show_stdout_in_cmdline*

  Type: |boolean|
  Default: `0`

  Whether to print the stdout output to the cmdline.

g:axe#float_term_height_pct                      *g:axe#float_term_height_pct*

  Type: |integer|
  Default: `30`

  The height of the floating terminal in percentage of the window height.

g:axe#float_term_width_pct                        *g:axe#float_term_width_pct*

  Type: |integer|
  Default: `75`

  The width of the floating terminal in percentage of the window width.

g:axe#float_term_height_max                      *g:axe#float_term_height_max*

  Type: |integer|
  Default: `30`

  The maximum height of the floating terminal.

g:axe#float_term_width_max                        *g:axe#float_term_width_max*

  Type: |integer|
  Default: `80`

  The maximum width of the floating terminal.

g:axe#float_term_height_min                      *g:axe#float_term_height_min*

  Type: |integer|
  Default: `15`

  The minimum height of the floating terminal.

g:axe#float_term_width_min                        *g:axe#float_term_width_min*

  Type: |integer|
  Default: `40`

  The minimum width of the floating terminal.

g:axe#float_term_anchor                              *g:axe#float_term_anchor*

  Type: |string|
  Default: `'SE'`

  The corner of the terminal for which the coordinates are calculated. Valid
  options are `'NW'`, `'NE'`, `'SW'`, and `'SE'`.

g:axe#float_term_relative                          *g:axe#float_term_relative*

  Type: |string|
  Default: `'win'`

  The object the coordinates of the terminal corner should be calculated in
  relations to. Valid options are `'win'`, `'cursor'`, and `'editor'`.

g:axe#open_term_in_float                            *g:axe#open_term_in_float*

  Type: |boolean|
  Default: `0`

  Whether to open the terminal in a floating window.

  vim:tw=78:ts=4:ft=help:norl:
