*vimdo*

A configurable plugin to execute external commands asynchronously.

------------------------------------------------------------------------------
1. Commands

*VimDo*           - `VimDo {cmd}` where `cmd` is the sub-command you defined
                (see |g:vimdo#cmds| below). This will execute the
                command you configured.
*VimDoList*       - List all the defined sub-commands available for the current
                file type
*VimDoProcs*      - List all background processes launched through |VimDo|
                (those that run not in the terminal but in the background)
*VimDoStop*       - Terminate process with the provided process number.
                `VimDoStop {#}` where `#` is the process number listed by
                |VimDoListProcs|.

*VimDoFloats*     - List all the float terminals opened by |VimDo|.

*VimDoCloseFloat* - Close the floating window with the provided window ID.
                `VimDoCloseFloat {#}` where `#` is the window ID listed by
                |VimDoFloats|.

*VimDoBang*       - `VimDoBang {cmd}` where `cmd` is a shell command. This is an
                asynchronous version of the usual vim bang command. This
                follows the global configuration.


------------------------------------------------------------------------------
2. Configurations

Configurations could be global or local. Global configurations reside in your
`init.vim` whereas local configurations are located in `.vimdo.vim` in
your local directory, either in the same folder as the file to be edited or in
the root of the `git` repository. Local configurations, if found, always have
precedence over global configurations. The configuration options that are
covered in the following are applicable to both global and local
configurations.


g:vimdo#cmds                                                        *g:vimdo#cmds*

  All hooks reside in `g:vimdo#cmds`. It is a dictionary that maps `VimDo`
  sub-commands to shell commands. The dictionary must contain keys (as
  `string`'s) that are vim `filetype`'s. The value of the each entry is
  another dictionary that must contain this entry:

    `cmd`              |string| The command to be invoked
  
  Aside from `cmd`, you can include any valid configuration keys (without the
  `'vimdo#'` prefix) in the dictionary and these will have precedence over the
  global/file type configurations.

  One extra key that is not available as a configuration key is `callback`:

    `callback`         |string| Name of the callback function. The callback
                     function takes a |list| of |strings| as its only
                     argument.

  Instead of being specific file types, the first level keys could optionally
  be a wildcard, in this case `'*'` that serves as a catch-all and the command
  will henceforth be defined for all file types. Notice that file type
  specific commands will override catch-all commands if conflicts arise.
  
  Example: >
  
    let g:vimdo#cmds = {
          \ '*': {
          \     'update-ctags': {
          \       'cmd': 'ctags -R -h --exclude={.git}',
          \       'with_filename': 0,
          \     },
          \   },
          \ 'rust': {
          \     'run': {'cmd': 'cargo run', 'with_filename': 0, 'in_term': 1},
          \     'release-build': {
          \       'cmd': 'cargo build --release',
          \       'in_term': 1
          \     },
          \   },
          \ 'haskell': {
          \     'type': {
          \        'cmd': ['stack', 'exec', 'hhpc', '--', 'type',
          \                'vimdo#util#filename', 'vimdo#util#line', 'vimdo#util#col'],
          \        'show_stdout_in_float': 1,
          \        'in_term': 0,
          \        'callback': 'ProcessTypeResults',
          \      }
          \   },
          \ }

    function! ProcessTypeResults(text)
      let l:o = ['']
      let l:s = 100000
      let l:col = col('.')
      for l:line in a:text
        let l:output = split(l:line, '"')
        if l:output !=# []
          let l:num = split(l:output[0])
          " if start and end aren't on the same line then it is not just for the
          " word the cursor is sitting on
          if l:num[0] ==# l:num[2]
            let l:d1 = abs(l:num[1] - l:col)
            let l:d2 = abs(l:num[3] - l:col)
            let l:s1 = l:d1 + l:d2
            if l:s1 < l:s
              let l:o = [l:output[1]]
              let l:s = l:s1
            endif
          endif
        endif
      endfor
      return l:o
    endfunction

  <

g:vimdo#filetype_defaults                              *g:vimdo#filetype_defaults*

  Type: |dictionary|
  Default: `{}`

  This option sets the behavior of the executor on a per filetype basis. The
  dictionary could contain any of the configuration entries (without the
  `'vimdo#'` prefix).

  Example: >
  
      let g:vimdo#filetype_defaults = {
        \ 'rust': {'with_filename': 0},
        \ }
  <


g:vimdo#with_filename                                      *g:vimdo#with_filename*
  
  Type: |boolean|
  Default: `1`

  Whether the name of the file currently in buffer should be appended to the
  command being run.


g:vimdo#in_term                                                  *g:vimdo#in_term*

  Type: |boolean|
  Default: `0`

  Whether to run commands in the neovim terminal.


g:vimdo#exe_in_proj_root                                *g:vimdo#exe_in_proj_root*

  Type: |boolean|
  Default: `0`

  Whether to run commands in project root directories (if the .git directory
  could be found).


g:vimdo#split_direction                                  *g:vimdo#split_direction*

  Type: |string|
  Default: `'down'`
  
  For terminal commands, this option determines the direction in which the
  terminal split should be opened. Available options are `'up'`, `'down'`,
  `'left'`, `'right'`.


g:vimdo#exit_message                                        *g:vimdo#exit_message*

  Type: |string|
  Default: `'\n-------------------------\nPress ENTER to exit'`

  This option sets the text to be printed to the terminal at the termination
  of a terminal command.


g:vimdo#term_height                                          *g:vimdo#term_height*

  Type: |integer|
  Default: `15`

  For terminal commands, this option sets the height of the terminal split (if
  |g:vimdo#split_direction| is set to `'up'` or `'down'`).


g:vimdo#term_width                                            *g:vimdo#term_width*

  Type: |integer|
  Default: `79`

  For terminal commands, this option sets the width of the terminal split (if
  |g:vimdo#split_direction| is set to `'left'` or `'right'`).


                                          *g:vimdo#remove_term_buffer_when_done*
g:vimdo#remove_term_buffer_when_done

  Type: |boolean|
  Default: `1`

  For terminal commands, this option determines whether the buffer in which
  the terminal was run should be discarded when the command exits.

g:vimdo#show_stderr_on_error                        *g:vimdo#show_stderr_on_error*

  Type: |boolean|
  Default: `1`

  For background commands, this option determines whether to show stderr when
  the command exited with an error.

g:vimdo#show_stdout_in_split                        *g:vimdo#show_stdout_in_split*

  Type: |boolean|
  Default: `0`

  Whether to pipe the output from stdout to a split.

g:vimdo#show_stdout_in_float                        *g:vimdo#show_stdout_in_float*

  Type: |boolean|
  Default: `0`

  Whether to show the output of stdout in a floating window.

g:vimdo#show_stdout_in_cmdline                    *g:vimdo#show_stdout_in_cmdline*

  Type: |boolean|
  Default: `0`

  Whether to print the stdout output to the cmdline.

g:vimdo#float_term_height_pct                      *g:vimdo#float_term_height_pct*

  Type: |integer|
  Default: `30`

  The height of the floating terminal in percentage of the window height.

g:vimdo#float_term_width_pct                        *g:vimdo#float_term_width_pct*

  Type: |integer|
  Default: `75`

  The width of the floating terminal in percentage of the window width.

g:vimdo#float_term_height_max                      *g:vimdo#float_term_height_max*

  Type: |integer|
  Default: `30`

  The maximum height of the floating terminal.

g:vimdo#float_term_width_max                        *g:vimdo#float_term_width_max*

  Type: |integer|
  Default: `80`

  The maximum width of the floating terminal.

g:vimdo#float_term_height_min                      *g:vimdo#float_term_height_min*

  Type: |integer|
  Default: `15`

  The minimum height of the floating terminal.

g:vimdo#float_term_width_min                        *g:vimdo#float_term_width_min*

  Type: |integer|
  Default: `40`

  The minimum width of the floating terminal.

g:vimdo#float_term_anchor                              *g:vimdo#float_term_anchor*

  Type: |string|
  Default: `'SE'`

  The corner of the terminal for which the coordinates are calculated. Valid
  options are `'NW'`, `'NE'`, `'SW'`, and `'SE'`.

g:vimdo#float_term_relative                          *g:vimdo#float_term_relative*

  Type: |string|
  Default: `'win'`

  The object the coordinates of the terminal corner should be calculated in
  relations to. Valid options are `'win'`, `'cursor'`, and `'editor'`.

g:vimdo#open_term_in_float                            *g:vimdo#open_term_in_float*

  Type: |boolean|
  Default: `0`

  Whether to open the terminal in a floating window.

  vim:tw=78:ts=4:ft=help:norl:
